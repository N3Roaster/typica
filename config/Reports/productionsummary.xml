<window id="dailyproduction">
    <reporttitle>Production:->Production Summary</reporttitle>
    <layout type="vertical">
        <layout type="horizontal">
            <daterange id="dates" initial="9" /><!-- Current Month to Date-->
            <label>Weight Unit:</label>
            <sqldrop id="unit" />
            <stretch />
        </layout>
        <webview id="report" />
    </layout>
    <menu name="File">
        <item id="print" shortcut="Ctrl+P">Print</item>
    </menu>
    <program>
        <![CDATA[
            this.windowTitle = "Typica - Production Summary";
            var dateSelect = findChildObject(this, 'dates');
            var dateQuery = new QSqlQuery();
            dateQuery.exec("SELECT time::date FROM roasting_log WHERE time = (SELECT min(time) FROM roasting_log) OR time = (SELECT max(time) FROM roasting_log) ORDER BY time ASC");
            dateQuery.next();
            var lifetimeStartDate = dateQuery.value(0);
            var lifetimeEndDate;
            if(dateQuery.next()) {
                lifetimeEndDate = dateQuery.value(0);
            } else {
                lifetimeEndDate = lifetimeStartDate;
            }
            dateSelect.setLifetimeRange(lifetimeStartDate, lifetimeEndDate);
            dateQuery = dateQuery.invalidate();
            var unitBox = findChildObject(this, 'unit');
            unitBox.addItem("Kg");
            unitBox.addItem("Lb");
            unitBox.currentIndex = QSettings.value("script/report_unit", 1);
            unitBox['currentIndexChanged(int)'].connect(function() {
                QSettings.setValue("script/report_unit", unitBox.currentIndex);
                refresh();
            });
            var view = findChildObject(this, 'report');
            var printMenu = findChildObject(this, 'print');
            printMenu.triggered.connect(function() {
                view.print();
            });
            function refresh() {
                var buffer = new QBuffer;
                buffer.open(3);
                var output = new XmlWriter(buffer);
                output.writeStartDocument("1.0");
                output.writeDTD('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg.dtd">');
                output.writeStartElement("html");
                output.writeAttribute("xmlns", "http://www.w3.org/1999/xhtml");
                output.writeStartElement("head");
                output.writeTextElement("title", "Production Summary");
                output.writeEndElement();
                output.writeStartElement("body");
                var dateRange = dateSelect.currentRange();
                var startDate = dateRange[0];
                var endDate = dateRange[dateRange.length - 1];
                output.writeTextElement("h1", "Production Summary: " + startDate + " - " + endDate);
                var conversion = 1;
                var unitText = 'Lb';
                if(unitBox.currentIndex == 0) {
                    conversion = 2.2;
                    unitText = 'Kg';
                }
                var query = new QSqlQuery();
                query.prepare("SELECT count(1), sum(unroasted_total_quantity) / :c1, sum(roasted_quantity) / :c2 FROM roasting_log WHERE time >= :sd AND time < :ed ::date + interval '1 day'");
                query.bind(":c1", conversion);
                query.bind(":c2", conversion);
                query.bind(":sd", startDate);
                query.bind(":ed", endDate);
                query.exec();
                query.next();
                var batchesRoasted = query.value(0);
                var unroastedSum = query.value(1);
                var roastedSum = query.value(2);
                output.writeTextElement("p", "" + roastedSum + " " + unitText + " roasted from " + unroastedSum + " " + unitText + " green in " + batchesRoasted + " batches.");
                query.prepare("SELECT time::date AS date, count(1), sum(unroasted_total_quantity) / :c1, sum(roasted_quantity) / :c2 FROM roasting_log WHERE time >= :sd AND time < :ed ::date + interval '1 day' GROUP BY date ORDER BY date ASC");
                query.bind(":c1", conversion);
                query.bind(":c2", conversion);
                query.bind(":sd", startDate);
                query.bind(":ed", endDate);
                query.exec();
                output.writeStartElement("table");
                output.writeAttribute("rules", "groups");
                output.writeAttribute("cellpadding", "3px");
                output.writeStartElement("thead");
                output.writeStartElement("tr");
                output.writeTextElement("th", "Date");
                output.writeTextElement("th", "Batches");
                output.writeTextElement("th", "Unroasted (" + unitText + ")");
                output.writeTextElement("th", "Roasted (" + unitText + ")");
                output.writeEndElement();
                output.writeEndElement();
                output.writeStartElement("tbody");
                while(query.next()) {
                    output.writeStartElement("tr");
                    output.writeStartElement("td");
                    output.writeStartElement("a");
                    output.writeAttribute("href", "typica://script/d" + query.value(0));
                    output.writeCDATA(query.value(0));
                    output.writeEndElement();
                    output.writeEndElement();
                    output.writeTextElement("td", query.value(1));
                    output.writeTextElement("td", query.value(2));
                    output.writeTextElement("td", query.value(3));
                    output.writeEndElement();
                }
                output.writeEndElement();
                output.writeStartElement("tfoot");
                output.writeStartElement("tr");
                output.writeStartElement("td");
                output.writeTextElement("strong", "Totals:");
                output.writeEndElement();
                output.writeTextElement("td", batchesRoasted);
                output.writeTextElement("td", unroastedSum);
                output.writeTextElement("td", roastedSum);
                output.writeEndElement();
                output.writeEndElement();
                output.writeEndElement();
                output.writeEndElement();
                output.writeEndElement();
                output.writeEndDocument();
                view.setContent(buffer);
                buffer.close();
                query = query.invalidate();
            }
            refresh();
            dateSelect.rangeUpdated.connect(refresh);
            view.scriptLinkClicked.connect(function(url) {
                var arg = url.slice(1, url.length).split("-");
                var details = createReport("dailyproductiondetail.xml");
                var selector = findChildObject(details, "reportdate");
                selector.setDate(arg[0], arg[1], arg[2]);
            });
        ]]>
    </program>
</window>
